CREATE TABLE DWH_ADMIN_DOCUMENT_ORIGIN
(
  DOCUMENT_ORIGIN_CODE  VARCHAR2(50 BYTE),
  DOCUMENT_ORIGIN_STR   VARCHAR2(200 BYTE)
);


CREATE TABLE DWH_COHORT
(
  COHORT_NUM          INTEGER,
  TITLE_COHORT        VARCHAR2(300 BYTE),
  DESCRIPTION_COHORT  VARCHAR2(4000 BYTE),
  COHORT_DATE         DATE,
  USER_NUM            INTEGER,
  DATAMART_NUM        INTEGER,
  PRIMARY KEY (COHORT_NUM)
);


CREATE TABLE DWH_COHORT_RESULT
(
  COHORT_NUM    INTEGER,
  STATUS        INTEGER,
  ADD_DATE      DATE,
  USER_NUM_ADD  INTEGER,
  PATIENT_NUM   INTEGER,
  FOREIGN KEY (COHORT_NUM)  REFERENCES DWH_COHORT (COHORT_NUM) ON DELETE CASCADE
);


CREATE TABLE DWH_COHORT_RESULT_COMMENT
(
  COHORT_RESULT_COMMENT_NUM  INTEGER,
  COHORT_NUM                 INTEGER,
  PATIENT_NUM                INTEGER,
  COMMENT_DATE               DATE,
  USER_NUM                   INTEGER,
  COMMENTARY                 VARCHAR2(4000 BYTE),
  PRIMARY KEY (COHORT_RESULT_COMMENT_NUM),
  FOREIGN KEY (COHORT_NUM)  REFERENCES DWH_COHORT (COHORT_NUM) ON DELETE CASCADE
);


CREATE TABLE DWH_COHORT_USER_RIGHT
(
  COHORT_NUM  INTEGER,
  USER_NUM    INTEGER,
  RIGHT       VARCHAR2(40 BYTE),
  FOREIGN KEY (COHORT_NUM) 
  REFERENCES DWH_COHORT (COHORT_NUM)
  ON DELETE CASCADE)
);


CREATE TABLE DWH_DATA
(
  DATA_NUM              INTEGER,
  DOCUMENT_NUM          INTEGER                 NOT NULL,
  THESAURUS_CODE        VARCHAR2(30 BYTE)       NOT NULL,
  THESAURUS_DATA_NUM    INTEGER       NOT NULL,
  VAL_NUMERIC           FLOAT(126),
  VAL_TEXT              VARCHAR2(500 BYTE),
  DOCUMENT_DATE         DATE,
  LOWER_BOUND           FLOAT(126),
  UPPER_BOUND           FLOAT(126),
  ENCOUNTER_NUM         VARCHAR2(30 BYTE),
  DOCUMENT_ORIGIN_CODE  VARCHAR2(30 BYTE),
  AGE_PATIENT           FLOAT(126),
  DEPARTMENT_NUM        INTEGER,
  PATIENT_NUM           INTEGER,
  UPLOAD_ID             INTEGER,
  PRIMARY KEY (DATA_NUM)
);


CREATE TABLE DWH_DATAMART
(
  DATAMART_NUM          INTEGER,
  TITLE_DATAMART        VARCHAR2(300 BYTE),
  DATAMART_DATE         DATE,
  DATE_START            DATE,
  END_DATE              DATE,
  DESCRIPTION_DATAMART  VARCHAR2(4000 BYTE),
  TEMPORARY_STATUS      INTEGER,
  DATAMART_NUM_ORIGIN   INTEGER,
  PRIMARY KEY (DATAMART_NUM)
);


CREATE TABLE DWH_DATAMART_DOC_ORIGIN
(
  DATAMART_NUM          INTEGER,
  DOCUMENT_ORIGIN_CODE  VARCHAR2(40 BYTE),
  FOREIGN KEY (DATAMART_NUM) 
  REFERENCES DWH_DATAMART (DATAMART_NUM)
  ON DELETE CASCADE)
);


CREATE TABLE DWH_DATAMART_RESULT
(
  DATAMART_NUM  INTEGER,
  PATIENT_NUM   INTEGER,
  FOREIGN KEY (DATAMART_NUM) 
  REFERENCES DWH_DATAMART (DATAMART_NUM)
  ON DELETE CASCADE)
);


CREATE TABLE DWH_DATAMART_USER_RIGHT
(
  DATAMART_NUM  INTEGER,
  USER_NUM      INTEGER,
  RIGHT         VARCHAR2(40 BYTE),
  FOREIGN KEY (DATAMART_NUM) 
  REFERENCES DWH_DATAMART (DATAMART_NUM)
  ON DELETE CASCADE)
);


CREATE TABLE DWH_DOCUMENT
(
  DOCUMENT_NUM              INTEGER             NOT NULL,
  UPDATE_DATE               DATE,
  TITLE                     VARCHAR2(400 BYTE),
  DOCUMENT_ORIGIN_CODE      VARCHAR2(40 BYTE),
  DOCUMENT_DATE             DATE,
  ENCOUNTER_NUM             VARCHAR2(30 BYTE),
  UNIT_CODE                 VARCHAR2(30 BYTE),
  ID_DOC_SOURCE             VARCHAR2(300 BYTE),
  UF_EXEC_DROP              VARCHAR2(30 BYTE),
  DISPLAYED_TEXT            CLOB,
  AUTHOR                    VARCHAR2(200 BYTE),
  UM_DROP                   VARCHAR2(30 BYTE),
  EXTRACTCONCEPT_DONE_FLAG  INTEGER,
  ENRGENE_DONE_FLAG         INTEGER,
  DEPARTMENT_NUM            INTEGER,
  UNIT_NUM                  INTEGER,
  ENRICHTEXT_DONE_FLAG      INTEGER,
  PATIENT_NUM               INTEGER,
  DOCUMENT_TYPE             VARCHAR2(40 BYTE),
  UPLOAD_ID                 INTEGER
);


CREATE TABLE DWH_ENRSEM
(
  ENRSEM_NUM               INTEGER,
  DOCUMENT_NUM             INTEGER,
  ENCOUNTER_NUM            VARCHAR2(30 BYTE),
  DOCUMENT_DATE            DATE,
  DOCUMENT_ORIGIN_CODE     VARCHAR2(30 BYTE),
  AGE_PATIENT              FLOAT(126),
  CERTAINTY                INTEGER,
  CONTEXT                  VARCHAR2(50 BYTE),
  THESAURUS_CODE           VARCHAR2(30 BYTE),
  CONCEPT_CODE             VARCHAR2(30 BYTE),
  CONCEPT_STR_FOUND        VARCHAR2(500 BYTE),
  UPDATE_DATE              DATE,
  PATIENT_NUM              INTEGER,
  TFIDF_CODE_DOCUMENT      FLOAT(126),
  COUNT_CONCEPT            INTEGER,
  COUNT_CONCEPT_STR_FOUND  INTEGER,
  UPLOAD_ID                INTEGER
);


CREATE TABLE DWH_ETL_PROCESS
(
  PROCESS_TYPE   VARCHAR2(50 BYTE),
  COUNT_PROCESS  INTEGER
);


CREATE TABLE DWH_ETL_SCRIPT
(
  SCRIPT                VARCHAR2(50 BYTE),
  LAST_EXECUTION_DATE   DATE,
  COMMENTARY            VARCHAR2(4000 BYTE),
  COUNT_DOCUMENT        INTEGER,
  DOCUMENT_ORIGIN_CODE  VARCHAR2(50 BYTE),
  UPLOAD_ID             INTEGER
);


CREATE TABLE DWH_ETL_THESAURUS_ENRSEM
(
  CONCEPT_CODE    VARCHAR2(30 BYTE),
  CONCEPT_STR     VARCHAR2(500 BYTE),
  STR_LENGTH      NUMBER,
  LOAD_DATE       DATE,
  COUNT_DOCUMENT  INTEGER
);


CREATE TABLE DWH_ETL_THESAURUS_GENE
(
  CONCEPT_CODE    VARCHAR2(30 BYTE),
  CONCEPT_STR     VARCHAR2(500 BYTE),
  STR_LENGTH      NUMBER,
  LOAD_DATE       DATE,
  COUNT_DOCUMENT  INTEGER
);

CREATE TABLE DWH_EXPORT_DATA
( 
  EXPORT_DATA_NUM NUMBER(38,0),
  USER_NUM        NUMBER(38,0),
  TITLE           VARCHAR2(500 BYTE) ,
  LIST_CONCEPT    VARCHAR2(4000 BYTE),
  CREATION_DATE   DATE,
  SHARE_LIST      VARCHAR2(500 BYTE)
);


CREATE TABLE DWH_INFO_ENRSEM
(
  COUNT_DISTINCT_PATIENT  INTEGER
);


CREATE TABLE DWH_INFO_LOAD
(
  COUNT_PATIENT         INTEGER,
  COUNT_DOCUMENT        INTEGER,
  YEAR                  INTEGER,
  DOCUMENT_ORIGIN_CODE  VARCHAR2(40 BYTE),
  MONTH                 INTEGER
);


CREATE TABLE DWH_LOG_DOCUMENT
(
  DOCUMENT_NUM  INTEGER,
  USER_NUM      INTEGER,
  LOG_DATE      DATE,
  NOMINATIVE    VARCHAR2(10 BYTE)
);


CREATE TABLE DWH_LOG_PAGE
(
  USER_NUM  INTEGER,
  LOG_DATE  DATE,
  PAGE      VARCHAR2(50 BYTE)
);


CREATE TABLE DWH_LOG_PATIENT
(
  USER_NUM     INTEGER                          NOT NULL,
  IPP          VARCHAR2(30 BYTE),
  LOG_DATE     DATE,
  NOMINATIVE   INTEGER                          NOT NULL,
  LOG_CONTEXT  VARCHAR2(50 BYTE)                NOT NULL,
  PATIENT_NUM  INTEGER
);


CREATE TABLE DWH_LOG_QUERY
(
  USER_NUM       INTEGER,
  LOG_DATE       DATE,
  QUERY_CONTEXT  VARCHAR2(50 BYTE),
  XML_QUERY      CLOB
)
;


CREATE TABLE DWH_NOTIFICATION
(
  USER_NUM_SENT       INTEGER,
  USER_NUM_RECEIVER   INTEGER,
  NOTIFICATION_TYPE   VARCHAR2(30 BYTE),
  NOTIFICATION_TEXT   VARCHAR2(4000 BYTE),
  SHARED_ELEMENT_NUM  INTEGER,
  NOTIFICATION_DATE   DATE,
  VIEW_DATE           DATE,
  NOTIFICATION_NUM    INTEGER
);


CREATE TABLE DWH_PATIENT
(
  LASTNAME             VARCHAR2(100 BYTE),
  FIRSTNAME            VARCHAR2(40 BYTE),
  BIRTH_DATE           DATE,
  SEX                  VARCHAR2(2 BYTE),
  MAIDEN_NAME          VARCHAR2(81 BYTE),
  IPP_DROP             VARCHAR2(30 BYTE),
  STATUT_DROP          INTEGER,
  RESIDENCE_ADDRESS    VARCHAR2(1000 BYTE),
  PHONE_NUMBER         VARCHAR2(1000 BYTE),
  ZIP_CODE             VARCHAR2(30 BYTE),
  RESIDENCE_CITY       VARCHAR2(200 BYTE),
  DEATH_DATE           DATE,
  RESIDENCE_COUNTRY    VARCHAR2(100 BYTE),
  RESIDENCE_LATITUDE   VARCHAR2(300 BYTE),
  RESIDENCE_LONGITUDE  VARCHAR2(300 BYTE),
  DEATH_CODE           VARCHAR2(2 BYTE),
  UPDATE_DATE          DATE,
  BIRTH_COUNTRY        VARCHAR2(100 BYTE),
  BIRTH_CITY           VARCHAR2(100 BYTE),
  BIRTH_ZIP_CODE       VARCHAR2(10 BYTE),
  BIRTH_LATITUDE       FLOAT(126),
  BIRTH_LONGITUDE      FLOAT(126),
  PATIENT_NUM          INTEGER,
  UPLOAD_ID            INTEGER
);


CREATE TABLE DWH_PATIENT_CONSULTATION
(
  CONSULTATION_DATE  DATE,
  UNIT_NUM           INTEGER,
  DEPARTMENT_NUM     INTEGER,
  UNIT_CODE          VARCHAR2(10 BYTE),
  PATIENT_NUM        INTEGER,
  EMERGENCY          INTEGER,
  UPLOAD_ID          INTEGER
);


CREATE TABLE DWH_PATIENT_DEPARTMENT
(
  DEPARTMENT_NUM  INTEGER                       NOT NULL,
  PATIENT_NUM     INTEGER
);


CREATE TABLE DWH_PATIENT_IPPHIST
(
  PATIENT_NUM          INTEGER,
  HOSPITAL_PATIENT_ID  VARCHAR2(100 BYTE),
  ORIGIN_PATIENT_ID    VARCHAR2(40 BYTE),
  MASTER_PATIENT_ID    INTEGER,
  UPLOAD_ID            INTEGER
);


CREATE TABLE DWH_PATIENT_MVT
(
  IPP             VARCHAR2(20 BYTE),
  ENCOUNTER_NUM   VARCHAR2(20 BYTE),
  UNIT_CODE       VARCHAR2(10 BYTE),
  ENTRY_DATE      DATE,
  OUT_DATE        DATE,
  UNIT_NUM        INTEGER,
  DEPARTMENT_NUM  INTEGER,
  PATIENT_NUM     INTEGER,
  UPLOAD_ID       INTEGER
);


CREATE TABLE DWH_PATIENT_REL
(
  PATIENT_NUM_1  INTEGER,
  PATIENT_NUM_2  INTEGER,
  RELATION       VARCHAR2(40 BYTE)
);


CREATE TABLE DWH_PATIENT_STAT
(
  PATIENT_NUM                  INTEGER,
  COUNT_UNIQUE_CONCEPT         INTEGER,
  COUNT_TOTAL_CONCEPT          INTEGER,
  MIN_DATE_DOC                 DATE,
  MAX_DATE_DOC                 DATE,
  COUNT_DOC                    INTEGER,
  UPDATE_DATE                  DATE,
  COUNT_UNIQUE_CONCEPT_NONNEG  INTEGER
);


CREATE TABLE DWH_PATIENT_STAY
(
  IPP            VARCHAR2(20 BYTE),
  ENCOUNTER_NUM  VARCHAR2(20 BYTE),
  ENTRY_DATE     DATE,
  OUT_DATE       DATE,
  OUT_MODE       VARCHAR2(500 BYTE),
  ENTRY_MODE     VARCHAR2(400 BYTE),
  UNIT_CODE_IN   VARCHAR2(10 BYTE),
  UNIT_CODE_OUT  VARCHAR2(10 BYTE),
  UNIT_NUM_IN    INTEGER,
  UNIT_NUM_OUT   INTEGER,
  PATIENT_NUM    INTEGER,
  TYPE_DOS       VARCHAR2(10 BYTE),
  UPLOAD_ID      INTEGER
);


CREATE TABLE DWH_PROCESS
(
  PROCESS_NUM       VARCHAR2(50 BYTE),
  STATUS            INTEGER,
  USER_NUM          INTEGER,
  COMMENTARY        VARCHAR2(4000 BYTE),
  RESULT            CLOB,
  PROCESS_END_DATE  DATE
);


CREATE TABLE DWH_PROCESS_PATIENT
(
  PROCESS_NUM  VARCHAR2(50 BYTE)                NOT NULL,
  PATIENT_NUM  INTEGER                          NOT NULL
);


CREATE TABLE DWH_PROFILE_DOCUMENT_ORIGIN
(
  USER_PROFILE          VARCHAR2(40 BYTE),
  DOCUMENT_ORIGIN_CODE  VARCHAR2(40 BYTE)
);


CREATE TABLE DWH_PROFILE_RIGHT
(
  USER_PROFILE  VARCHAR2(40 BYTE),
  RIGHT         VARCHAR2(40 BYTE)
);


CREATE TABLE DWH_QUERY
(
  QUERY_NUM        NUMBER(38),
  USER_NUM         INTEGER,
  XML_QUERY        CLOB,
  QUERY_DATE       DATE,
  TITLE_QUERY      VARCHAR2(500 BYTE),
  DATAMART_NUM     NUMBER(38),
  QUERY_TYPE       VARCHAR2(30 BYTE),
  CRONTAB_QUERY    INTEGER,
  LAST_LOAD_DATE   DATE,
  CRONTAB_PERIODE  VARCHAR2(20 BYTE),
  PIN              INTEGER,
  PRIMARY KEY (QUERY_NUM)
);


CREATE TABLE DWH_QUERY_RESULT
(
  LOAD_DATE    DATE,
  QUERY_NUM    INTEGER,
  PATIENT_NUM  INTEGER,
  FOREIGN KEY (QUERY_NUM) 
  REFERENCES DWH_QUERY (QUERY_NUM)
  ON DELETE CASCADE)
);


CREATE TABLE DWH_REQUEST_ACCESS
(
  REQUEST_ACCESS_NUM            INTEGER,
  USER_NUM_REQUEST              INTEGER,
  DEPARTMENT_NUM                INTEGER,
  NUSER_NUM_DEPARTMENT_MANAGER  INTEGER,
  READABLE_QUERY                CLOB,
  REQUEST_ACCESS_DATE           DATE,
  MANAGER_AGREEMENT             INTEGER,
  MANAGER_AGREEMENT_DATE        DATE,
  VIEWED_BY_MANAGER_DATE        DATE,
  VIEWED_BY_MANAGER_OK_DATE     DATE,
  VIEWED_BY_MANAGER_NOTOK_DATE  DATE
);


CREATE TABLE DWH_REQUEST_ACCESS_PATIENT
(
  REQUEST_ACCESS_NUM  INTEGER,
  PATIENT_NUM         INTEGER
);


CREATE TABLE DWH_TEXT
(
  DOCUMENT_NUM          INTEGER                 NOT NULL,
  TEXT                  CLOB,
  CONTEXT               VARCHAR2(200 BYTE)      NOT NULL,
  ENCOUNTER_NUM         VARCHAR2(30 BYTE),
  CERTAINTY             FLOAT(126)              NOT NULL,
  DOCUMENT_DATE         DATE,
  DOCUMENT_ORIGIN_CODE  VARCHAR2(30 BYTE)       NOT NULL,
  TITLE                 VARCHAR2(300 BYTE),
  AUTHOR                VARCHAR2(80 BYTE),
  AGE_PATIENT           FLOAT(126),
  ENRICH_TEXT           CLOB,
  DEPARTMENT_NUM        INTEGER,
  PATIENT_NUM           INTEGER,
  UPLOAD_ID             INTEGER
);


CREATE TABLE DWH_THESAURUS_CITY
(
  CITY_NAME       VARCHAR2(200 BYTE),
  CITY_NORM_NAME  VARCHAR2(200 BYTE),
  LATITUDE        VARCHAR2(300 BYTE),
  LONGITUDE       VARCHAR2(300 BYTE),
  ZIP_CODE        VARCHAR2(10 BYTE),
  INSEE_CODE      VARCHAR2(10 BYTE),
  AREA_CODE       VARCHAR2(10 BYTE),
  COUNTRY         VARCHAR2(100 BYTE)
)
;


CREATE TABLE DWH_THESAURUS_CORRORTHO
(
  TERM  VARCHAR2(4000 BYTE)
);


CREATE TABLE DWH_THESAURUS_COUNTRY
(
  CAPITAL_CITY_CODE         VARCHAR2(4 BYTE),
  CAPITAL_CITY_STR_FR       VARCHAR2(200 BYTE),
  CAPITAL_CITY_STR_EN       VARCHAR2(200 BYTE),
  CAPITAL_CITY_STR_NORM_FR  VARCHAR2(200 BYTE),
  CAPITAL_CITY_CODE_EN      VARCHAR2(10 BYTE),
  CAPITAL_CITY_STR          VARCHAR2(100 BYTE),
  LATITUDE                  VARCHAR2(30 BYTE),
  LONGITUDE                 VARCHAR2(30 BYTE),
  COORDONNEES               VARCHAR2(200 BYTE),
  CAPITAL_CITY_STR_SYN_FR   VARCHAR2(300 BYTE),
  INSEE_CODE                VARCHAR2(6 BYTE)
);


CREATE TABLE DWH_THESAURUS_DATA
(
  THESAURUS_DATA_NUM    INTEGER,
  THESAURUS_CODE        VARCHAR2(30 BYTE)       NOT NULL,
  CONCEPT_CODE          VARCHAR2(100 BYTE)      NOT NULL,
  CONCEPT_STR           VARCHAR2(300 BYTE)      NOT NULL,
  INFO_COMPLEMENT       VARCHAR2(500 BYTE),
  MEASURING_UNIT        VARCHAR2(30 BYTE),
  VALUE_TYPE            VARCHAR2(50 BYTE)       NOT NULL,
  LIST_VALUES           VARCHAR2(4000 BYTE),
  THESAURUS_PARENT_NUM  INTEGER,
  DESCRIPTION           VARCHAR2(4000 BYTE),
  COUNT_DATA_USED       INTEGER,
  PRIMARY KEY (THESAURUS_DATA_NUM)
);


CREATE TABLE DWH_THESAURUS_DATA_GRAPH
(
  THESAURUS_DATA_SON_NUM     INTEGER,
  THESAURUS_DATA_FATHER_NUM  INTEGER,
  DISTANCE                   INTEGER,
  THESAURUS_CODE             VARCHAR2(30 BYTE)
);


CREATE TABLE DWH_THESAURUS_DEPARTMENT
(
  DEPARTMENT_NUM   INTEGER,
  DEPARTMENT_STR   VARCHAR2(400 BYTE),
  DEPARTMENT_CODE  VARCHAR2(5 BYTE),
  PRIMARY KEY (DEPARTMENT_NUM)
);


CREATE TABLE DWH_THESAURUS_ENRSEM
(
  THESAURUS_ENRSEM_NUM       INTEGER,
  THESAURUS_CODE             VARCHAR2(40 BYTE),
  THESAURUS_STR              VARCHAR2(40 BYTE),
  PATH_CODE                  VARCHAR2(4000 BYTE),
  PATH_STR                   VARCHAR2(4000 BYTE),
  CONCEPT_CODE               VARCHAR2(30 BYTE),
  CONCEPT_STR                VARCHAR2(500 BYTE),
  NIVEAU                     INTEGER,
  ADD_DATE                   DATE,
  COUNT_DOC_CONCEPT_STR      INTEGER,
  PREF                       VARCHAR2(1 BYTE),
  COUNT_PATIENT_SUBSUMPTION  INTEGER,
  COUNT_PATIENT              INTEGER,
  GENOTYPE                   INTEGER,
  PHENOTYPE                  INTEGER,
  CONCEPT_STR_EN             VARCHAR2(500 BYTE)
);


CREATE TABLE DWH_THESAURUS_ENRSEM_GRAPH
(
  CONCEPT_CODE_FATHER  VARCHAR2(30 BYTE),
  CONCEPT_CODE_SON     VARCHAR2(30 BYTE),
  DISTANCE             INTEGER
);


CREATE TABLE DWH_THESAURUS_PUBMED_GENE
(
  TAX_ID                   INTEGER,
  GENEID                   INTEGER,
  SYMBOL                   VARCHAR2(50 BYTE),
  LOCUSTAG                 VARCHAR2(100 BYTE),
  SYNONYMS                 VARCHAR2(300 BYTE),
  DBXREFS                  VARCHAR2(300 BYTE),
  CHROMOSOME               VARCHAR2(30 BYTE),
  MAP_LOCATION             VARCHAR2(100 BYTE),
  DESCRIPTION              VARCHAR2(300 BYTE),
  TYPE_OF_GENE             VARCHAR2(30 BYTE),
  SYMBOL_FROM_NOM_AUTH     VARCHAR2(50 BYTE),
  FULL_NAME_FROM_NOM_AUTH  VARCHAR2(1000 BYTE),
  NOMENCLATURE_STATUS      VARCHAR2(2 BYTE),
  OTHER_DESIGNATIONS       VARCHAR2(4000 BYTE),
  MODIFICATION_DATE        DATE,
  CUI                      VARCHAR2(40 BYTE)
);


CREATE TABLE DWH_THESAURUS_PUBMED_GENE2GO
(
  TAX_ID     INTEGER,
  GENEID     INTEGER,
  GO_ID      VARCHAR2(20 BYTE),
  EVIDENCE   VARCHAR2(5 BYTE),
  QUALIFIER  VARCHAR2(50 BYTE),
  GO_TERM    VARCHAR2(300 BYTE),
  CATEGORY   VARCHAR2(20 BYTE),
  PUBMED     CLOB
);


CREATE TABLE DWH_THESAURUS_TAL
(
  THESAURUS_TAL_NUM  INTEGER,
  THESAURUS_CODE     VARCHAR2(40 BYTE),
  THESAURUS_STR      VARCHAR2(40 BYTE),
  PATH_CODE          VARCHAR2(4000 BYTE),
  PATH_STR           VARCHAR2(4000 BYTE),
  CONCEPT_CODE       VARCHAR2(30 BYTE),
  CONCEPT_STR        VARCHAR2(500 BYTE),
  NIVEAU             INTEGER,
  ADD_DATE           DATE,
  EXCLUDED           INTEGER,
  NEW_CODE_STR       INTEGER,
  ADD_MODE           VARCHAR2(30 BYTE),
  EXCLUSION_DATE     DATE
);


CREATE TABLE DWH_THESAURUS_TAL_CHEMIN
(
  CONCEPT_CODE       VARCHAR2(30 BYTE),
  CONCEPT_CODE_PATH  VARCHAR2(4000 BYTE)
);


CREATE TABLE DWH_THESAURUS_TYPESEMANTIC
(
  CONCEPT_CODE   VARCHAR2(30 BYTE),
  SEMANTIC_TYPE  VARCHAR2(400 BYTE)
);


CREATE TABLE DWH_THESAURUS_UNIT
(
  UNIT_NUM         INTEGER,
  UNIT_CODE        VARCHAR2(30 BYTE),
  UNIT_STR         VARCHAR2(400 BYTE),
  DEPARTMENT_NUM   INTEGER,
  DATE_START_UNIT  DATE,
  UNIT_END_DATE    DATE,
  FOREIGN KEY (DEPARTMENT_NUM) 
  REFERENCES DWH_THESAURUS_DEPARTMENT (DEPARTMENT_NUM)
  ON DELETE CASCADE)
);


CREATE TABLE DWH_TMP_PRERESULT
(
  DOCUMENT_NUM          INTEGER                 NOT NULL,
  QUERY_KEY             VARCHAR2(4000 BYTE),
  TMPRESULT_DATE        DATE,
  USER_NUM              INTEGER,
  DATAMART_NUM          INTEGER,
  DOCUMENT_ORIGIN_CODE  VARCHAR2(50 BYTE),
  PATIENT_NUM           INTEGER,
  DOCUMENT_DATE         DATE
)
CACHE;


CREATE TABLE DWH_TMP_QUERY
(
  QUERY_KEY         VARCHAR2(4000 BYTE),
  SQL               VARCHAR2(4000 BYTE),
  DATAMART_NUM      INTEGER,
  USER_NUM          INTEGER,
  STATUS_CALCULATE  INTEGER,
  QUERY_DATE        DATE,
  COUNT_PATIENT     INTEGER,
  SQL_CLOB          CLOB
)
;


CREATE TABLE DWH_TMP_RESULT
(
  TMPRESULT_NUM         NUMBER(38),
  USER_NUM              VARCHAR2(30 BYTE),
  ENCOUNTER_NUM         VARCHAR2(20 BYTE),
  DOCUMENT_NUM          NUMBER(38)              NOT NULL,
  DOCUMENT_DATE         DATE,
  AUTHOR                VARCHAR2(80 BYTE),
  DOCUMENT_ORIGIN_CODE  VARCHAR2(30 BYTE),
  TITLE                 VARCHAR2(300 BYTE),
  DEPARTMENT_NUM        INTEGER,
  PATIENT_NUM           INTEGER
)
CACHE;


CREATE TABLE DWH_TOOL
(
  TOOL_NUM     INTEGER,
  TITLE        VARCHAR2(100 BYTE),
  AUTHORS      VARCHAR2(100 BYTE),
  DESCRIPTION  VARCHAR2(4000 BYTE),
  URL          VARCHAR2(300 BYTE)
);


CREATE TABLE DWH_USER
(
  USER_NUM           INTEGER,
  FIRSTNAME          VARCHAR2(30 BYTE),
  LASTNAME           VARCHAR2(30 BYTE),
  LOGIN              VARCHAR2(30 BYTE),
  MAIL               VARCHAR2(100 BYTE),
  PASSWD             VARCHAR2(200 BYTE),
  USER_PHONE_NUMBER  VARCHAR2(50 BYTE),
  COUNT_ATTEMPT      INTEGER,
  ATTEMPT_DATE       DATE,
  CREATION_DATE       DATE,
  EXPIRATION_DATE       DATE,
  PRIMARY KEY (USER_NUM)
);



CREATE TABLE DWH_USER_DEPARTMENT
(
  USER_NUM            INTEGER,
  DEPARTMENT_NUM      INTEGER,
  MANAGER_DEPARTMENT  INTEGER,
  FOREIGN KEY (DEPARTMENT_NUM) 
  REFERENCES DWH_THESAURUS_DEPARTMENT (DEPARTMENT_NUM)
  ON DELETE CASCADE,
  FOREIGN KEY (USER_NUM) 
  REFERENCES DWH_USER (USER_NUM)
  ON DELETE CASCADE)
);


CREATE TABLE DWH_USER_ONLINE
(
  USER_NUM          INTEGER,
  LAST_UPDATE_DATE  DATE,
  DATABASE          VARCHAR2(30 BYTE),
  USER_NAME         VARCHAR2(100 BYTE)
);


CREATE TABLE DWH_USER_PROFILE
(
  USER_PROFILE  VARCHAR2(30 BYTE),
  USER_NUM      INTEGER
);
